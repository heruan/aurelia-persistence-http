import { PersistenceManager, Query, Sorting } from "aurelia-persistence";
import { HttpClient } from "aurelia-http-client";
import { CancelablePromise } from "aurelia-utils";
import { TypeBinder } from "type-binder";
export declare class HttpPersistenceManager implements PersistenceManager {
    static BASE_URI: string;
    static ENTITY_RELATION: string;
    static COLLECTION_RELATION: string;
    httpClient: HttpClient;
    typeBinder: TypeBinder;
    locators: Map<new () => Object, Map<string, string>>;
    filterHeaderName: string;
    limitHeaderName: string;
    skipHeaderName: string;
    sortHeaderName: string;
    propertyFilterHeaderName: string;
    countTotalHeaderName: string;
    countFilterHeaderName: string;
    propertyFilterSeparator: string;
    constructor(httpClient: HttpClient, typeBinder: TypeBinder);
    addEntityType<E extends Object>(type: new () => E, baseUri: string, collectionPath: string, entityPath: string): Promise<void>;
    findAll<E extends Object>(type: new () => E, query?: Query, limit?: number, skip?: number, sorting?: Sorting, properties?: string[], relation?: string, relationParams?: Object): CancelablePromise<E[]>;
    findOne<E extends Object>(type: new () => E, query?: Query, skip?: number, sorting?: Sorting, properties?: string[], relation?: string, relationParams?: Object): CancelablePromise<E>;
    count<E extends Object>(type: new () => E, query?: Query, limit?: number, skip?: number, relation?: string, relationParams?: Object): CancelablePromise<number>;
    httpCount(url: string, query?: Query, limit?: number, skip?: number): CancelablePromise<number>;
    get<E extends Object>(type: new () => E, params: Object, properties?: string[], relation?: string): CancelablePromise<E>;
    httpGet<T>(url: string, properties: string[], type: new () => T, ...generics: any[]): CancelablePromise<T>;
    save<E extends Object>(type: new () => E, entity: E, properties?: string[], relation?: string, relationParams?: Object, preferPut?: boolean): CancelablePromise<E>;
    delete<E extends Object>(type: new () => E, entity: E, relation?: string, relationParams?: Object): CancelablePromise<void>;
    link<E extends Object>(type: new () => E, relation: string, params?: Object): string;
}
