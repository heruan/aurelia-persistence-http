{"version":3,"sources":["../../src/main/http-persistence-manager.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6EAA0D;AAC1D,2DAAsF;AACtF,2DAAsF;AACtF,yDAAgF;AAEhF,6CAA0E;AAC1E,2CAAyC;AACzC,0CAA4C;AAE5C,oCAAc,CAAC,SAAS,CAAC,SAAS,EAAE,cAAM,OAAA,UAAC,MAAM,EAAE,SAAS,EAAE,OAAO;IAC/D,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AAC/B,CAAC,EAFyC,CAEzC,CAAC,CAAC;AAGH,IAAa,sBAAsB;IA8B/B,gCAAmB,UAAsB,EAAE,UAAsB;QAhB1D,qBAAgB,GAAW,UAAU,CAAC;QAEtC,oBAAe,GAAW,SAAS,CAAC;QAEpC,mBAAc,GAAW,QAAQ,CAAC;QAElC,mBAAc,GAAW,QAAQ,CAAC;QAElC,6BAAwB,GAAW,mBAAmB,CAAC;QAEvD,yBAAoB,GAAW,eAAe,CAAA;QAE9C,0BAAqB,GAAW,gBAAgB,CAAC;QAEjD,4BAAuB,GAAW,GAAG,CAAC;QAGzC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAwC,CAAC;IACpE,CAAC;IAEM,8CAAa,GAApB,UAAuC,IAAgB,EAAE,OAAe,EAAE,cAAsB,EAAE,UAAkB;QAChH,IAAI,QAAQ,GAAG,IAAI,GAAG,EAAkB,CAAC;QACzC,QAAQ,CAAC,GAAG,CAAC,wBAAsB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACvD,QAAQ,CAAC,GAAG,CAAC,wBAAsB,CAAC,mBAAmB,EAAE,OAAO,GAAG,cAAc,CAAC,CAAC;QACnF,QAAQ,CAAC,GAAG,CAAC,wBAAsB,CAAC,eAAe,EAAE,OAAO,GAAG,UAAU,CAAC,CAAC;QAC3E,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAClC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,wCAAO,GAAd,UACQ,IAAgB,EAChB,KAAgC,EAChC,KAAiB,EACjB,IAAgB,EAChB,OAAgC,EAChC,UAAqB,EACrB,QAA6D,EAC7D,cAAuB;QAR/B,iBAsBC;QApBO,sBAAA,EAAA,YAAmB,iCAAW,EAAE;QAChC,sBAAA,EAAA,SAAiB;QACjB,qBAAA,EAAA,QAAgB;QAChB,wBAAA,EAAA,cAAuB,6BAAO,EAAE;QAEhC,yBAAA,EAAA,WAAmB,wBAAsB,CAAC,mBAAmB;QAEjE,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;QACpD,IAAI,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;QAChE,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aAClE,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,KAAG,KAAO,CAAC;aAC5C,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE,KAAG,IAAM,CAAC;aAC1C,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QAC9D,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC5B,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,wBAAwB,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;QAC5G,CAAC;QACD,IAAI,OAAO,GAA4C,cAAc,CAAC,IAAI,EAAE,CAAC;QAC7E,IAAI,OAAO,GAA4B,OAAO,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,EAAlD,CAAkD,CAAC,CAAC;QACnH,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAEM,wCAAO,GAAd,UACQ,IAAgB,EAChB,KAAgC,EAChC,IAAgB,EAChB,OAAgC,EAChC,UAAqB,EACrB,QAA6D,EAC7D,cAAuB;QALvB,sBAAA,EAAA,YAAmB,iCAAW,EAAE;QAChC,qBAAA,EAAA,QAAgB;QAChB,wBAAA,EAAA,cAAuB,6BAAO,EAAE;QAEhC,yBAAA,EAAA,WAAmB,wBAAsB,CAAC,mBAAmB;QAEjE,IAAI,QAAQ,GAA4B,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;QAC1H,IAAI,OAAO,GAA0B,QAAQ,CAAC,IAAI,CAAC,UAAA,QAAQ;YACvD,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;YAC5B,CAAC;YAAC,IAAI;gBAAC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QACjC,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAEM,sCAAK,GAAZ,UACQ,IAAgB,EAChB,KAAgC,EAChC,KAAiB,EACjB,IAAgB,EAChB,QAA6D,EAC7D,cAA4B;QAJ5B,sBAAA,EAAA,YAAmB,iCAAW,EAAE;QAChC,sBAAA,EAAA,SAAiB;QACjB,qBAAA,EAAA,QAAgB;QAChB,yBAAA,EAAA,WAAmB,wBAAsB,CAAC,mBAAmB;QAC7D,+BAAA,EAAA,mBAA4B;QAChC,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;QACpD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAEM,0CAAS,GAAhB,UAAiB,GAAW,EAAE,KAAgC,EAAE,KAAiB,EAAE,IAAgB;QAArE,sBAAA,EAAA,YAAmB,iCAAW,EAAE;QAAE,sBAAA,EAAA,SAAiB;QAAE,qBAAA,EAAA,QAAgB;QAC/F,IAAI,OAAO,GAAkD,IAAI,CAAC,UAAW,CAAC,aAAa,CAAC,GAAG,CAAC;aAC3F,OAAO,EAAE;aACT,UAAU,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACxD,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACvD,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;aACrD,IAAI,EAAE,CAAC;QACZ,IAAI,OAAO,GAA+B,OAAO,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAS,OAAO,CAAC,OAAO,EAAxB,CAAwB,CAAC,CAAC;QAC5F,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAEM,oCAAG,GAAV,UACQ,IAAgB,EAChB,MAAc,EACd,UAAqB,EACrB,QAAyD;QAAzD,yBAAA,EAAA,WAAmB,wBAAsB,CAAC,eAAe;QAC7D,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAEM,wCAAO,GAAd,UAAkB,GAAW,EAAE,UAAoB,EAAE,IAAgB;QAArE,iBASC;QATsE,kBAAkB;aAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;YAAlB,iCAAkB;;QACrF,IAAI,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;QAChE,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACb,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,wBAAwB,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACnF,CAAC;QACD,IAAI,OAAO,GAA4C,cAAc,CAAC,IAAI,EAAE,CAAC;QAC7E,IAAI,OAAO,GAA0B,OAAO,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,EAA3C,CAA2C,CAAC,CAAC;QAC1G,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAEM,qCAAI,GAAX,UACQ,IAAgB,EAChB,MAAS,EACT,QAAiB,EACjB,cAAuB;QAJ/B,iBAgCC;QA3BG,IAAI,OAA6B,CAAC;QAClC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,KAAK,GAAG,wBAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACnC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAI,KAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,IAAI,wBAAsB,CAAC,eAAe,EAAE,cAAc,IAAI,MAAM,CAAC,CAAC;gBACxG,OAAO,GAA0B,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAG,CAAC;qBAC9D,OAAO,EAAE;qBACT,WAAW,CAAC,KAAK,CAAC;qBAClB,eAAe,CAAC,IAAI,8CAA+B,CAAC,gCAAW,CAAC,sBAAsB,CAAC,CAAC;qBACxF,IAAI,EAAE;qBACN,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAG,CAAC,EAAxB,CAAwB,CAAC;qBACzC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,EAA3C,CAA2C,CAAC,CAAC;YACtE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,GAA0B,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACzD,OAAO,CAAC,MAAM,GAAG,cAAQ,CAAC,CAAC;YAC/B,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,IAAI,wBAAsB,CAAC,mBAAmB,EAAE,cAAc,IAAI,MAAM,CAAC,CAAC;YAC5G,OAAO,GAA0B,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC;iBAC9D,MAAM,EAAE;iBACR,WAAW,CAAC,MAAM,CAAC;iBACnB,eAAe,CAAC,IAAI,8CAA+B,CAAC,gCAAW,CAAC,gBAAgB,CAAC,CAAC;iBAClF,IAAI,EAAE;iBACN,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,gCAAW,CAAC,QAAQ,CAAC,EAAzC,CAAyC,CAAC;iBAC1D,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,EAA3C,CAA2C,CAAC,CAAC;QACtE,CAAC;QACD,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAEM,uCAAM,GAAb,UACQ,IAAgB,EAChB,MAAS,EACT,QAAyD,EACzD,cAAuB;QADvB,yBAAA,EAAA,WAAmB,wBAAsB,CAAC,eAAe;QAE7D,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,IAAI,MAAM,CAAC,CAAC;QAC9D,IAAI,OAAO,GAA4C,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;QAC5G,IAAI,OAAO,GAA6B,OAAO,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;QACtE,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAEM,qCAAI,GAAX,UACQ,IAAgB,EAChB,QAAgB,EAChB,MAAe;QACnB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACnF,CAAC;IAEL,6BAAC;AAAD,CAvLA,AAuLC,IAAA;AArLiB,+BAAQ,GAAW,MAAM,CAAC;AAE1B,sCAAe,GAAW,QAAQ,CAAC;AAEnC,0CAAmB,GAAW,MAAM,CAAC;AAN1C,sBAAsB;IADlC,yCAAU;qCA+BwB,gCAAU,EAAc,wBAAU;GA9BxD,sBAAsB,CAuLlC;AAvLY,wDAAsB","file":"http-persistence-manager.js","sourcesContent":["import { autoinject } from \"aurelia-dependency-injection\";\nimport { PersistenceManager, Query, FilterQuery, Sorting } from \"aurelia-persistence\";\nimport { RequestBuilder, HttpClient, HttpResponseMessage } from \"aurelia-http-client\";\nimport { HttpHeaders, LinkHeaderParser, ContentType } from \"aurelia-http-utils\";\nimport { CancelablePromise } from \"aurelia-utils\";\nimport { JsonPatch, JsonMultipartRelatedInterceptor } from \"aurelia-json\";\nimport { TypeBinder } from \"type-binder\";\nimport * as UrlTemplate from \"url-template\";\n\nRequestBuilder.addHelper(\"asCount\", () => (client, processor, message) => {\n      message.method = 'COUNT';\n});\n\n@autoinject\nexport class HttpPersistenceManager implements PersistenceManager {\n\n    public static BASE_URI: string = \"base\";\n\n    public static ENTITY_RELATION: string = \"entity\";\n\n    public static COLLECTION_RELATION: string = \"list\";\n\n    public httpClient: HttpClient;\n\n    public typeBinder: TypeBinder;\n\n    public locators: Map<new() => Object, Map<string, string>>;\n\n    public filterHeaderName: string = \"X-Filter\";\n\n    public limitHeaderName: string = \"X-Limit\";\n\n    public skipHeaderName: string = \"X-Skip\";\n\n    public sortHeaderName: string = \"X-Sort\";\n\n    public propertyFilterHeaderName: string = \"X-Property-Filter\";\n\n    public countTotalHeaderName: string = \"X-Count-Total\"\n\n    public countFilterHeaderName: string = \"X-Count-Filter\";\n\n    public propertyFilterSeparator: string = \",\";\n\n    public constructor(httpClient: HttpClient, typeBinder: TypeBinder) {\n        this.httpClient = httpClient;\n        this.typeBinder = typeBinder;\n        this.locators = new Map<new() => Object, Map<string, string>>();\n    }\n\n    public addEntityType<E extends Object>(type: new() => E, baseUri: string, collectionPath: string, entityPath: string): Promise<void> {\n        let locators = new Map<string, string>();\n        locators.set(HttpPersistenceManager.BASE_URI, baseUri);\n        locators.set(HttpPersistenceManager.COLLECTION_RELATION, baseUri + collectionPath);\n        locators.set(HttpPersistenceManager.ENTITY_RELATION, baseUri + entityPath);\n        this.locators.set(type, locators);\n        return Promise.resolve();\n    }\n\n    public findAll<E extends Object>(\n            type: new() => E,\n            query: Query = new FilterQuery(),\n            limit: number = 0,\n            skip: number = 0,\n            sorting: Sorting = new Sorting(),\n            properties?: string[],\n            relation: string = HttpPersistenceManager.COLLECTION_RELATION,\n            relationParams?: Object): CancelablePromise<E[]> {\n        let url = this.link(type, relation, relationParams);\n        let requestBuilder = this.httpClient.createRequest(url).asGet();\n        requestBuilder.withHeader(this.filterHeaderName, JSON.stringify(query))\n            .withHeader(this.limitHeaderName, `${limit}`)\n            .withHeader(this.skipHeaderName, `${skip}`)\n            .withHeader(this.sortHeaderName, JSON.stringify(sorting));\n        if (Array.isArray(properties)) {\n            requestBuilder.withHeader(this.propertyFilterHeaderName, properties.join(this.propertyFilterSeparator));\n        }\n        let request = <CancelablePromise<HttpResponseMessage>> requestBuilder.send();\n        let promise = <CancelablePromise<E[]>> request.then(success => this.typeBinder.bind(success.content, Array, type));\n        promise.cancel = request.cancel;\n        return promise;\n    }\n\n    public findOne<E extends Object>(\n            type: new() => E,\n            query: Query = new FilterQuery(),\n            skip: number = 0,\n            sorting: Sorting = new Sorting(),\n            properties?: string[],\n            relation: string = HttpPersistenceManager.COLLECTION_RELATION,\n            relationParams?: Object): CancelablePromise<E> {\n        let entities = <CancelablePromise<E[]>> this.findAll(type, query, 1, skip, sorting, properties, relation, relationParams);\n        let promise = <CancelablePromise<E>> entities.then(entities => {\n            if (entities.length > 0) {\n                return entities.shift();\n            } else throw new Error(\"Entity not found.\");\n        });\n        promise.cancel = entities.cancel;\n        return promise;\n    }\n\n    public count<E extends Object>(\n            type: new() => E,\n            query: Query = new FilterQuery(),\n            limit: number = 0,\n            skip: number = 0,\n            relation: string = HttpPersistenceManager.COLLECTION_RELATION,\n            relationParams: Object = { }): CancelablePromise<number> {\n        let url = this.link(type, relation, relationParams);\n        return this.httpCount(url, query, limit, skip);\n    }\n\n    public httpCount(url: string, query: Query = new FilterQuery(), limit: number = 0, skip: number = 0): CancelablePromise<number> {\n        let request = <CancelablePromise<HttpResponseMessage>> (<any>this.httpClient).createRequest(url)\n            .asCount()\n            .withHeader(this.filterHeaderName, JSON.stringify(query))\n            .withHeader(this.limitHeaderName, JSON.stringify(limit))\n            .withHeader(this.skipHeaderName, JSON.stringify(skip))\n            .send();\n        let promise = <CancelablePromise<number>> request.then(success => <number> success.content);\n        promise.cancel = request.cancel;\n        return promise;\n    }\n\n    public get<E extends Object>(\n            type: new() => E,\n            params: Object,\n            properties?: string[],\n            relation: string = HttpPersistenceManager.ENTITY_RELATION): CancelablePromise<E> {\n        let url = this.link(type, relation, params);\n        return this.httpGet(url, properties, type);\n    }\n\n    public httpGet<T>(url: string, properties: string[], type: new() => T, ...generics: any[]): CancelablePromise<T> {\n        let requestBuilder = this.httpClient.createRequest(url).asGet();\n        if (properties) {\n            requestBuilder.withHeader(this.propertyFilterHeaderName, properties.join(\",\"));\n        }\n        let request = <CancelablePromise<HttpResponseMessage>> requestBuilder.send();\n        let promise = <CancelablePromise<T>> request.then(success => this.typeBinder.bind(success.content, type));\n        promise.cancel = request.cancel;\n        return promise;\n    }\n\n    public save<E extends Object>(\n            type: new() => E,\n            entity: E,\n            relation?: string,\n            relationParams?: Object): CancelablePromise<E> {\n        let promise: CancelablePromise<E>;\n        if (this.typeBinder.isBound(type, entity)) {\n            let patch = JsonPatch.diff(entity);\n            if (patch.length > 0) {\n                let url = this.link(type, relation || HttpPersistenceManager.ENTITY_RELATION, relationParams || entity);\n                promise = <CancelablePromise<E>> this.httpClient.createRequest(url)\n                    .asPatch()\n                    .withContent(patch)\n                    .withInterceptor(new JsonMultipartRelatedInterceptor(ContentType.APPLICATION_JSON_PATCH))\n                    .send()\n                    .then(success => this.httpClient.get(url))\n                    .then(success => this.typeBinder.bind(success.content, type));\n            } else {\n                promise = <CancelablePromise<E>> Promise.resolve(entity);\n                promise.cancel = () => { };\n            }\n        } else {\n            let url = this.link(type, relation || HttpPersistenceManager.COLLECTION_RELATION, relationParams || entity);\n            promise = <CancelablePromise<E>> this.httpClient.createRequest(url)\n                .asPost()\n                .withContent(entity)\n                .withInterceptor(new JsonMultipartRelatedInterceptor(ContentType.APPLICATION_JSON))\n                .send()\n                .then(success => this.httpClient.get(HttpHeaders.LOCATION))\n                .then(success => this.typeBinder.bind(success.content, type));\n        }\n        return promise;\n    }\n\n    public delete<E extends Object>(\n            type: new() => E,\n            entity: E,\n            relation: string = HttpPersistenceManager.ENTITY_RELATION,\n            relationParams?: Object): CancelablePromise<void> {\n        let url = this.link(type, relation, relationParams || entity);\n        let request = <CancelablePromise<HttpResponseMessage>> this.httpClient.createRequest(url).asDelete().send();\n        let promise = <CancelablePromise<void>> request.then(success => null);\n        promise.cancel = request.cancel;\n        return promise;\n    }\n\n    public link<E extends Object>(\n            type: new() => E,\n            relation: string,\n            params?: Object): string {\n        return UrlTemplate.parse(this.locators.get(type).get(relation)).expand(params);\n    }\n\n}\n"]}